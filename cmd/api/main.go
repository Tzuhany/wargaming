// Code generated by hertz generator.

package main

import (
	"github.com/cloudwego/hertz/pkg/app/server/registry"
	consulapi "github.com/hashicorp/consul/api"
	"github.com/hertz-contrib/registry/consul"
	"wargaming/cmd/api/biz/rpc"
	"wargaming/config"
	"wargaming/pkg/constants"
	"wargaming/pkg/mw"
	"wargaming/pkg/tracer"
	"wargaming/pkg/utils"

	"github.com/cloudwego/hertz/pkg/app/server"
	"github.com/cloudwego/kitex/pkg/klog"
	"github.com/hertz-contrib/gzip"
)

var (
	listenAddr string // listen port
)

func Init() {
	config.Init(constants.ApiServiceName)

	rpc.Init()

	tracer.InitJaeger(constants.ApiServiceName)

	// set log
	klog.SetLevel(klog.LevelDebug)
}

func main() {

	Init()

	consulClient, err := consulapi.NewClient(consulapi.DefaultConfig())
	if err != nil {
		panic(err)
	}
	c := consul.NewConsulRegister(consulClient)

	for index, addr := range config.Service.AddrList {
		if ok := utils.AddrCheck(addr); ok {
			listenAddr = addr
			break
		}

		if index == len(config.Service.AddrList)-1 {
			klog.Fatal("not available port from config")
		}
	}

	r := server.New(
		server.WithHostPorts(listenAddr),
		server.WithHandleMethodNotAllowed(true),
		server.WithMaxRequestBodySize(1<<31),
		server.WithRegistry(c, &registry.Info{
			ServiceName: constants.ApiServiceName,
			Addr:        utils.NewNetAddr("tcp", listenAddr),
			Weight:      10,
			Tags:        nil,
		}),
	)

	// 中间件
	r.Use(
		mw.Recovery(),
		mw.Cors(),
	)

	// Gzip
	r.Use(gzip.Gzip(gzip.BestSpeed))

	register(r)
	r.Spin()
}
