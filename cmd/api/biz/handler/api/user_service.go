// Code generated by hertz generator.

package api

import (
	"context"
	"wargaming/cmd/api/biz/pack"
	"wargaming/cmd/api/biz/rpc"
	"wargaming/kitex_gen/user"

	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	api "wargaming/cmd/api/biz/model/api"
)

// Register 用户注册
// @Summary 用户注册
// @Accept json
// @Param RegisterReq body api.RegisterReq true "请求体"
// @Success 200 {object} api.RegisterResp
// @Router /user/register [post]
func Register(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.RegisterReq
	err = c.BindAndValidate(&req)
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp := new(api.RegisterResp)

	rpcResp, err := rpc.Register(ctx, &user.RegisterReq{
		Username: req.Username,
		Password: req.Password,
	})

	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = &api.BaseResp{
		Code: rpcResp.Base.Code,
		Msg:  rpcResp.Base.Msg,
	}

	resp.Token = rpcResp.Token

	pack.SendResponse(c, resp)
}

// Login 用户登录
// @Summary 用户登录
// @Accept json
// @Param LoginReq body api.LoginReq true "请求体"
// @Success 200 {object} api.LoginResp
// @Router /user/login [post]
func Login(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.LoginReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.LoginResp)

	rpcResp, err := rpc.Login(ctx, &user.LoginReq{
		Username: req.Username,
		Password: req.Password,
	})
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = &api.BaseResp{
		Code: rpcResp.Base.Code,
		Msg:  rpcResp.Base.Msg,
	}

	resp.UserId = rpcResp.UserId
	resp.Token = rpcResp.Token

	pack.SendResponse(c, resp)
}

// UserInfo 用户信息
// @Summary 用户信息
// @Accept json
// @Param UserInfoReq body api.UserInfoReq true "请求体"
// @Success 200 {object} api.UserInfoResp
// @Router /user/info [post]
func UserInfo(ctx context.Context, c *app.RequestContext) {
	var err error
	var req api.UserInfoReq
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp := new(api.UserInfoResp)

	rpcResp, err := rpc.UserInfo(ctx, &user.UserInfoReq{
		UserId: req.UserId,
	})
	if err != nil {
		pack.SendFailResponse(c, err)
		return
	}

	resp.Base = &api.BaseResp{
		Code: rpcResp.Base.Code,
		Msg:  rpcResp.Base.Msg,
	}

	resp.User = &api.User{
		ID:       rpcResp.User.Id,
		Username: rpcResp.User.Username,
	}

	pack.SendResponse(c, resp)
}
