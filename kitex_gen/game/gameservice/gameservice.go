// Code generated by Kitex v0.8.0. DO NOT EDIT.

package gameservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	game "wargaming/kitex_gen/game"
)

func serviceInfo() *kitex.ServiceInfo {
	return gameServiceServiceInfo
}

var gameServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "GameService"
	handlerType := (*game.GameService)(nil)
	methods := map[string]kitex.MethodInfo{
		"Match": kitex.NewMethodInfo(matchHandler, newGameServiceMatchArgs, newGameServiceMatchResult, false),
		"Move":  kitex.NewMethodInfo(moveHandler, newGameServiceMoveArgs, newGameServiceMoveResult, false),
	}
	extra := map[string]interface{}{
		"PackageName":     "game",
		"ServiceFilePath": `idl/game.thrift`,
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.8.0",
		Extra:           extra,
	}
	return svcInfo
}

func matchHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceMatchArgs)
	realResult := result.(*game.GameServiceMatchResult)
	success, err := handler.(game.GameService).Match(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceMatchArgs() interface{} {
	return game.NewGameServiceMatchArgs()
}

func newGameServiceMatchResult() interface{} {
	return game.NewGameServiceMatchResult()
}

func moveHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*game.GameServiceMoveArgs)
	realResult := result.(*game.GameServiceMoveResult)
	success, err := handler.(game.GameService).Move(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newGameServiceMoveArgs() interface{} {
	return game.NewGameServiceMoveArgs()
}

func newGameServiceMoveResult() interface{} {
	return game.NewGameServiceMoveResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) Match(ctx context.Context, req *game.MatchReq) (r *game.MatchResp, err error) {
	var _args game.GameServiceMatchArgs
	_args.Req = req
	var _result game.GameServiceMatchResult
	if err = p.c.Call(ctx, "Match", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) Move(ctx context.Context, req *game.FindPathReq) (r *game.FindPathResp, err error) {
	var _args game.GameServiceMoveArgs
	_args.Req = req
	var _result game.GameServiceMoveResult
	if err = p.c.Call(ctx, "Move", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
